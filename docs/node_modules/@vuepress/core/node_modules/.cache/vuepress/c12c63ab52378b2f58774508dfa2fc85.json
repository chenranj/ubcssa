{"remainingRequest":"/Users/chenranj/ubcssa/docs/node_modules/babel-loader/lib/index.js??ref--3-1!/Users/chenranj/ubcssa/docs/node_modules/vuepress-plugin-fulltext-search/services/flexsearchSvc.js","dependencies":[{"path":"/Users/chenranj/ubcssa/docs/node_modules/vuepress-plugin-fulltext-search/services/flexsearchSvc.js","mtime":1617573432000},{"path":"/Users/chenranj/ubcssa/docs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenranj/ubcssa/docs/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}